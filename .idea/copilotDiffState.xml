<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/facturacion_inventario/ui/ComposeScreens.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/facturacion_inventario/ui/ComposeScreens.kt" />
              <option name="originalContent" value="package com.example.facturacion_inventario.ui&#10;&#10;import android.widget.Toast&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import kotlinx.coroutines.launch&#10;import com.example.auth.AuthRepository&#10;import com.example.auth.TokenStorage&#10;import com.example.facturacion_inventario.R&#10;&#10;// Palette ajustada: fondo blanco y acentos azules oscuros&#10;private val BackgroundTop = Color(0xFFFFFFFF) // blanco&#10;private val BackgroundBottom = Color(0xFFEFF6FF) // azul muy claro para el degradado&#10;private val CardColor = Color(0xFFF7F7F9) // gris muy claro para tarjetas&#10;private val Accent = Color(0xFF0B3D91) // azul oscuro&#10;private val DarkText = Color(0xFF0F1724) // texto principal oscuro&#10;private val SubtleText = Color(0xFF6B7280) // subtítulo / labels&#10;&#10;@Composable&#10;fun LoginScreen(navController: NavController? = null, onLoginSuccess: (() -&gt; Unit)? = null) {&#10;    val context = LocalContext.current&#10;    val scope = rememberCoroutineScope()&#10;    var username by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var loading by remember { mutableStateOf(false) }&#10;&#10;    Surface(modifier = Modifier.fillMaxSize()) {&#10;        Box(modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(brush = Brush.verticalGradient(listOf(BackgroundTop, BackgroundBottom)))) {&#10;&#10;            Column(modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = 24.dp), horizontalAlignment = Alignment.CenterHorizontally) {&#10;&#10;                Spacer(Modifier.height(60.dp))&#10;&#10;                // Header (logo + title)&#10;                Image(painter = painterResource(id = R.drawable.ic_motorcycle_animated), contentDescription = &quot;logo&quot;,&#10;                    modifier = Modifier.size(80.dp))&#10;                Spacer(Modifier.height(12.dp))&#10;                Text(text = &quot;Moto Parts&quot;, color = DarkText, fontSize = 28.sp)&#10;                Text(text = &quot;Repuestos y accesorios&quot;, color = SubtleText, fontSize = 14.sp)&#10;&#10;                Spacer(Modifier.height(32.dp))&#10;&#10;                Card(modifier = Modifier.fillMaxWidth(), backgroundColor = CardColor, shape = RoundedCornerShape(8.dp), elevation = 4.dp) {&#10;                    Column(modifier = Modifier.padding(24.dp)) {&#10;                        OutlinedTextField(&#10;                            value = username,&#10;                            onValueChange = { username = it },&#10;                            label = { Text(text = &quot;Usuario o correo&quot;, color = SubtleText) },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            singleLine = true,&#10;                            colors = TextFieldDefaults.outlinedTextFieldColors(&#10;                                focusedBorderColor = Accent,&#10;                                unfocusedBorderColor = Color(0xFFDDDDDF),&#10;                                textColor = DarkText,&#10;                                focusedLabelColor = Accent,&#10;                                unfocusedLabelColor = SubtleText&#10;                            )&#10;                        )&#10;&#10;                        Spacer(Modifier.height(12.dp))&#10;&#10;                        OutlinedTextField(&#10;                            value = password,&#10;                            onValueChange = { password = it },&#10;                            label = { Text(text = &quot;Contraseña&quot;, color = SubtleText) },&#10;                            visualTransformation = PasswordVisualTransformation(),&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            singleLine = true,&#10;                            colors = TextFieldDefaults.outlinedTextFieldColors(&#10;                                focusedBorderColor = Accent,&#10;                                unfocusedBorderColor = Color(0xFFDDDDDF),&#10;                                textColor = DarkText,&#10;                                focusedLabelColor = Accent,&#10;                                unfocusedLabelColor = SubtleText&#10;                            )&#10;                        )&#10;&#10;                        Spacer(Modifier.height(16.dp))&#10;&#10;                        if (loading) {&#10;                            Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {&#10;                                CircularProgressIndicator(color = Accent)&#10;                            }&#10;                        } else {&#10;                            Button(onClick = {&#10;                                if (username.isBlank() || password.isBlank()) {&#10;                                    Toast.makeText(context, &quot;Completa usuario y contraseña&quot;, Toast.LENGTH_SHORT).show()&#10;                                    return@Button&#10;                                }&#10;                                loading = true&#10;                                scope.launch {&#10;                                    try {&#10;                                        val repo = AuthRepository(context, &quot;http://10.0.2.2:8080/&quot;)&#10;                                        val resp = repo.login(username, password)&#10;                                        val access = resp?.accessTokenNormalized&#10;                                        val refresh = resp?.refreshTokenNormalized&#10;                                        if (!access.isNullOrEmpty()) TokenStorage.setAccessToken(context, access)&#10;                                        if (!refresh.isNullOrEmpty()) TokenStorage.setRefreshToken(context, refresh)&#10;                                        Toast.makeText(context, &quot;Login correcto&quot;, Toast.LENGTH_SHORT).show()&#10;                                        onLoginSuccess?.invoke()&#10;                                        navController?.let { nc -&gt;&#10;                                            nc.navigate(&quot;dashboard&quot;) {&#10;                                                popUpTo(&quot;login&quot;) { inclusive = true }&#10;                                            }&#10;                                        }&#10;                                    } catch (ex: Exception) {&#10;                                        Toast.makeText(context, &quot;Login falló: ${ex.message}&quot;, Toast.LENGTH_LONG).show()&#10;                                    } finally {&#10;                                        loading = false&#10;                                    }&#10;                                }&#10;&#10;                            }, modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(56.dp), colors = ButtonDefaults.buttonColors(backgroundColor = Accent)) {&#10;                                Text(text = &quot;Ingresar&quot;, color = Color.White)&#10;                            }&#10;&#10;                            Spacer(Modifier.height(12.dp))&#10;&#10;                            // Social login separator&#10;                            Divider(color = Color(0xFFDDDDDD), thickness = 1.dp)&#10;                            Spacer(Modifier.height(12.dp))&#10;                            Text(text = &quot;o continuar con&quot;, color = SubtleText, modifier = Modifier.align(Alignment.CenterHorizontally))&#10;                            Spacer(Modifier.height(8.dp))&#10;&#10;                            // Google button&#10;                            OutlinedButton(onClick = { /* implementar google */ }, modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(48.dp), colors = ButtonDefaults.outlinedButtonColors(backgroundColor = CardColor)) {&#10;                                Image(painter = painterResource(id = R.drawable.ic_google), contentDescription = &quot;google&quot;, modifier = Modifier.size(24.dp))&#10;                                Spacer(Modifier.width(12.dp))&#10;                                Text(text = &quot;Continuar con Google&quot;, color = DarkText)&#10;                            }&#10;&#10;                            Spacer(Modifier.height(8.dp))&#10;&#10;                            Button(onClick = { /* implementar facebook */ }, modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(48.dp), colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFF1877F2))) {&#10;                                Image(painter = painterResource(id = R.drawable.ic_facebook), contentDescription = &quot;facebook&quot;, modifier = Modifier.size(24.dp))&#10;                                Spacer(Modifier.width(12.dp))&#10;                                Text(text = &quot;Continuar con Facebook&quot;, color = Color.White)&#10;                            }&#10;&#10;                            Spacer(Modifier.height(12.dp))&#10;&#10;                            TextButton(onClick = { navController?.navigate(&quot;register&quot;) }, modifier = Modifier.fillMaxWidth()) {&#10;                                Text(text = &quot;Crear cuenta&quot;, color = Accent)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.weight(1f))&#10;&#10;                Text(text = &quot;© Tu Empresa&quot;, color = SubtleText, fontSize = 12.sp)&#10;                Spacer(Modifier.height(24.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RegisterScreen(navController: NavController? = null, onRegisterSuccess: (() -&gt; Unit)? = null) {&#10;    val context = LocalContext.current&#10;    val scope = rememberCoroutineScope()&#10;&#10;    var username by remember { mutableStateOf(&quot;&quot;) }&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var nombre by remember { mutableStateOf(&quot;&quot;) }&#10;    var apellido by remember { mutableStateOf(&quot;&quot;) }&#10;    var inviteCode by remember { mutableStateOf(&quot;&quot;) }&#10;    var loading by remember { mutableStateOf(false) }&#10;&#10;    Surface(modifier = Modifier.fillMaxSize()) {&#10;        Box(modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(brush = Brush.verticalGradient(listOf(BackgroundTop, BackgroundBottom)))) {&#10;&#10;            Column(modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = 24.dp), horizontalAlignment = Alignment.CenterHorizontally) {&#10;&#10;                Spacer(Modifier.height(40.dp))&#10;&#10;                // Back button + Title&#10;                Row(modifier = Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) {&#10;                    IconButton(onClick = { navController?.navigateUp() }) {&#10;                        Icon(painter = painterResource(id = R.drawable.ic_arrow_back), contentDescription = &quot;back&quot;, tint = DarkText)&#10;                    }&#10;                    Spacer(Modifier.width(8.dp))&#10;                    Text(text = &quot;Crear cuenta&quot;, color = DarkText, fontSize = 24.sp)&#10;                }&#10;&#10;                Spacer(Modifier.height(12.dp))&#10;&#10;                Card(modifier = Modifier.fillMaxWidth(), backgroundColor = CardColor, shape = RoundedCornerShape(8.dp), elevation = 4.dp) {&#10;                    Column(modifier = Modifier.padding(24.dp)) {&#10;&#10;                        OutlinedTextField(&#10;                            value = username,&#10;                            onValueChange = { username = it },&#10;                            label = { Text(&quot;Usuario&quot;, color = SubtleText) },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            singleLine = true,&#10;                            colors = TextFieldDefaults.outlinedTextFieldColors(&#10;                                focusedBorderColor = Accent,&#10;                                unfocusedBorderColor = Color(0xFFDDDDDF),&#10;                                textColor = DarkText&#10;                            )&#10;                        )&#10;&#10;                        Spacer(Modifier.height(12.dp))&#10;&#10;                        OutlinedTextField(&#10;                            value = email,&#10;                            onValueChange = { email = it },&#10;                            label = { Text(&quot;Email&quot;, color = SubtleText) },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            singleLine = true,&#10;                            colors = TextFieldDefaults.outlinedTextFieldColors(&#10;                                focusedBorderColor = Accent,&#10;                                unfocusedBorderColor = Color(0xFFDDDDDF),&#10;                                textColor = DarkText&#10;                            )&#10;                        )&#10;&#10;                        Spacer(Modifier.height(12.dp))&#10;&#10;                        OutlinedTextField(&#10;                            value = password,&#10;                            onValueChange = { password = it },&#10;                            label = { Text(&quot;Contraseña&quot;, color = SubtleText) },&#10;                            visualTransformation = PasswordVisualTransformation(),&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            singleLine = true,&#10;                            colors = TextFieldDefaults.outlinedTextFieldColors(&#10;                                focusedBorderColor = Accent,&#10;                                unfocusedBorderColor = Color(0xFFDDDDDF),&#10;                                textColor = DarkText&#10;                            )&#10;                        )&#10;&#10;                        Spacer(Modifier.height(12.dp))&#10;&#10;                        OutlinedTextField(&#10;                            value = nombre,&#10;                            onValueChange = { nombre = it },&#10;                            label = { Text(&quot;Nombre&quot;, color = SubtleText) },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            singleLine = true,&#10;                            colors = TextFieldDefaults.outlinedTextFieldColors(&#10;                                focusedBorderColor = Accent,&#10;                                unfocusedBorderColor = Color(0xFFDDDDDF),&#10;                                textColor = DarkText&#10;                            )&#10;                        )&#10;&#10;                        Spacer(Modifier.height(12.dp))&#10;&#10;                        OutlinedTextField(&#10;                            value = apellido,&#10;                            onValueChange = { apellido = it },&#10;                            label = { Text(&quot;Apellido&quot;, color = SubtleText) },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            singleLine = true,&#10;                            colors = TextFieldDefaults.outlinedTextFieldColors(&#10;                                focusedBorderColor = Accent,&#10;                                unfocusedBorderColor = Color(0xFFDDDDDF),&#10;                                textColor = DarkText&#10;                            )&#10;                        )&#10;&#10;                        Spacer(Modifier.height(12.dp))&#10;&#10;                        Text(text = &quot;Código de invitación (opcional)&quot;, color = Accent)&#10;                        Spacer(Modifier.height(8.dp))&#10;&#10;                        OutlinedTextField(&#10;                            value = inviteCode,&#10;                            onValueChange = { inviteCode = it },&#10;                            label = { Text(&quot;Código de invitación&quot;, color = SubtleText) },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            singleLine = true,&#10;                            colors = TextFieldDefaults.outlinedTextFieldColors(&#10;                                focusedBorderColor = Accent,&#10;                                unfocusedBorderColor = Color(0xFFDDDDDF),&#10;                                textColor = DarkText&#10;                            )&#10;                        )&#10;&#10;                        Spacer(Modifier.height(20.dp))&#10;&#10;                        if (loading) {&#10;                            Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {&#10;                                CircularProgressIndicator(color = Accent)&#10;                            }&#10;                        } else {&#10;                            Button(onClick = {&#10;                                // Validaciones: username, email, password, nombre, apellido&#10;                                if (username.isBlank() || email.isBlank() || password.isBlank() || nombre.isBlank() || apellido.isBlank()) {&#10;                                    Toast.makeText(context, &quot;Rellena usuario, email, contraseña, nombre y apellido&quot;, Toast.LENGTH_SHORT).show()&#10;                                    return@Button&#10;                                }&#10;                                loading = true&#10;                                scope.launch {&#10;                                    try {&#10;                                        val repo = AuthRepository(context, &quot;http://10.0.2.2:8080/&quot;)&#10;                                        val req = com.example.auth.RegisterRequest(&#10;                                            username = username,&#10;                                            email = email,&#10;                                            password = password,&#10;                                            inviteCode = if (inviteCode.isBlank()) null else inviteCode,&#10;                                            nombre = nombre,&#10;                                            apellido = apellido&#10;                                        )&#10;                                        val resp = repo.register(req)&#10;                                        val access = resp?.accessTokenNormalized&#10;                                        val refresh = resp?.refreshTokenNormalized&#10;                                        if (!access.isNullOrEmpty()) TokenStorage.setAccessToken(context, access)&#10;                                        if (!refresh.isNullOrEmpty()) TokenStorage.setRefreshToken(context, refresh)&#10;&#10;                                        // Guardar info del usuario localmente&#10;                                        TokenStorage.setUserInfo(context, username, nombre, apellido)&#10;&#10;                                        Toast.makeText(context, &quot;Registro exitoso&quot;, Toast.LENGTH_SHORT).show()&#10;                                        onRegisterSuccess?.invoke()&#10;                                        navController?.let { nc -&gt;&#10;                                            nc.navigate(&quot;dashboard&quot;) {&#10;                                                popUpTo(&quot;register&quot;) { inclusive = true }&#10;                                            }&#10;                                        }&#10;                                    } catch (ex: Exception) {&#10;                                        Toast.makeText(context, &quot;Registro fallido: ${ex.message}&quot;, Toast.LENGTH_LONG).show()&#10;                                    } finally {&#10;                                        loading = false&#10;                                    }&#10;                                }&#10;&#10;                            }, modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(56.dp), colors = ButtonDefaults.buttonColors(backgroundColor = Accent)) {&#10;                                Text(text = &quot;Crear cuenta&quot;, color = Color.White)&#10;                            }&#10;&#10;                            Spacer(Modifier.height(12.dp))&#10;&#10;                            Text(text = &quot;Al crear una cuenta aceptas los términos&quot;, color = SubtleText, fontSize = 12.sp, modifier = Modifier.align(Alignment.CenterHorizontally))&#10;                        }&#10;&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.weight(1f))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DashboardScreen(navController: NavController, onLogout: (() -&gt; Unit)? = null) {&#10;    val context = LocalContext.current&#10;    val nombre = TokenStorage.getNombre(context)&#10;    val apellido = TokenStorage.getApellido(context)&#10;    val username = TokenStorage.getUsername(context)&#10;&#10;    Surface(modifier = Modifier.fillMaxSize()) {&#10;        Box(modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(brush = Brush.verticalGradient(listOf(BackgroundTop, BackgroundBottom)))) {&#10;            Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {&#10;                Spacer(Modifier.height(24.dp))&#10;                Text(text = &quot;Dashboard&quot;, color = DarkText, fontSize = 24.sp)&#10;                Spacer(Modifier.height(12.dp))&#10;                Text(text = &quot;${nombre.orEmpty()} ${apellido.orEmpty()}&quot;, color = SubtleText)&#10;                Text(text = username ?: &quot;-&quot;, color = Color(0xFF9CA3AF))&#10;&#10;                Spacer(Modifier.height(20.dp))&#10;&#10;                Button(onClick = { navController.navigate(&quot;home&quot;) }, modifier = Modifier.fillMaxWidth(), colors = ButtonDefaults.buttonColors(backgroundColor = Accent)) {&#10;                    Text(text = &quot;Ir a la tienda&quot;, color = Color.White)&#10;                }&#10;&#10;                Spacer(Modifier.weight(1f))&#10;&#10;                Button(onClick = {&#10;                    TokenStorage.clear(context)&#10;                    onLogout?.invoke()&#10;                }, modifier = Modifier.fillMaxWidth(), colors = ButtonDefaults.buttonColors(backgroundColor = Accent)) {&#10;                    Text(text = &quot;Cerrar sesión&quot;, color = Color.White)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// --- Pantallas de tienda básicas ---&#10;@Composable&#10;fun HomeScreen(navController: NavController) {&#10;    Surface(modifier = Modifier.fillMaxSize()) {&#10;        Box(modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(brush = Brush.verticalGradient(listOf(BackgroundTop, BackgroundBottom)))) {&#10;            Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {&#10;                Text(text = &quot;Tienda&quot;, color = DarkText, fontSize = 24.sp)&#10;                Spacer(Modifier.height(12.dp))&#10;&#10;                // Lista ejemplo de productos (estáticos)&#10;                val products = listOf(&quot;Cadena de transmisión&quot;, &quot;Filtro de aire&quot;, &quot;Bujía&quot;, &quot;Neumático trasero&quot;)&#10;                products.forEachIndexed { index, item -&gt;&#10;                    Card(modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 6.dp)&#10;                        .clickable { navController.navigate(&quot;product/${index}&quot;) }, backgroundColor = CardColor) {&#10;                        Row(modifier = Modifier.padding(12.dp), verticalAlignment = Alignment.CenterVertically) {&#10;                            Image(painter = painterResource(id = R.drawable.ic_motorcycle_animated), contentDescription = &quot;prod&quot;, modifier = Modifier.size(48.dp))&#10;                            Spacer(Modifier.width(12.dp))&#10;                            Column {&#10;                                Text(text = item, color = DarkText)&#10;                                Text(text = &quot;Descripción breve...&quot;, color = SubtleText, fontSize = 12.sp)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.weight(1f))&#10;                Row(horizontalArrangement = Arrangement.SpaceBetween, modifier = Modifier.fillMaxWidth()) {&#10;                    Button(onClick = { navController.navigate(&quot;cart&quot;) }, colors = ButtonDefaults.buttonColors(backgroundColor = Accent)) {&#10;                        Text(text = &quot;Carrito&quot;, color = Color.White)&#10;                    }&#10;                    Button(onClick = { navController.navigate(&quot;categories&quot;) }, colors = ButtonDefaults.buttonColors(backgroundColor = Accent)) {&#10;                        Text(text = &quot;Categorías&quot;, color = Color.White)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProductDetailScreen(productId: String?, navController: NavController) {&#10;    Surface(modifier = Modifier.fillMaxSize()) {&#10;        Box(modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(brush = Brush.verticalGradient(listOf(BackgroundTop, BackgroundBottom)))) {&#10;            Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {&#10;                Text(text = &quot;Detalle del producto&quot;, color = DarkText, fontSize = 24.sp)&#10;                Spacer(Modifier.height(12.dp))&#10;                Text(text = &quot;ID: ${productId ?: &quot;-&quot;}&quot;, color = SubtleText)&#10;&#10;                Spacer(Modifier.weight(1f))&#10;                Button(onClick = { navController.navigate(&quot;cart&quot;) }, modifier = Modifier.fillMaxWidth(), colors = ButtonDefaults.buttonColors(backgroundColor = Accent)) {&#10;                    Text(text = &quot;Añadir al carrito&quot;, color = Color.White)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CartScreen(navController: NavController) {&#10;    Surface(modifier = Modifier.fillMaxSize()) {&#10;        Box(modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(brush = Brush.verticalGradient(listOf(BackgroundTop, BackgroundBottom)))) {&#10;            Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {&#10;                Text(text = &quot;Carrito&quot;, color = DarkText, fontSize = 24.sp)&#10;                Spacer(Modifier.height(12.dp))&#10;                Text(text = &quot;Tu carrito está vacío (placeholder)&quot;, color = SubtleText)&#10;&#10;                Spacer(Modifier.weight(1f))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.spacedBy(12.dp)) {&#10;                    OutlinedButton(onClick = { navController.navigate(&quot;home&quot;) }, modifier = Modifier.weight(1f)) {&#10;                        Text(text = &quot;Seguir comprando&quot;, color = Accent)&#10;                    }&#10;                    Button(onClick = { /* ir a checkout */ }, modifier = Modifier.weight(1f), colors = ButtonDefaults.buttonColors(backgroundColor = Accent)) {&#10;                        Text(text = &quot;Finalizar compra&quot;, color = Color.White)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SearchScreen(navController: NavController) {&#10;    var query by remember { mutableStateOf(&quot;&quot;) }&#10;    Surface(modifier = Modifier.fillMaxSize()) {&#10;        Box(modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(brush = Brush.verticalGradient(listOf(BackgroundTop, BackgroundBottom)))) {&#10;            Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {&#10;                Text(text = &quot;Buscar&quot;, color = DarkText, fontSize = 24.sp)&#10;                Spacer(Modifier.height(12.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.spacedBy(8.dp)) {&#10;                    OutlinedTextField(value = query, onValueChange = { query = it }, label = { Text(&quot;Buscar productos&quot;, color = SubtleText) }, modifier = Modifier.weight(1f))&#10;                    Button(onClick = { /* aquí podrías navegar a resultados reales */ navController.navigate(&quot;home&quot;) }, colors = ButtonDefaults.buttonColors(backgroundColor = Accent)) {&#10;                        Text(text = &quot;Buscar&quot;, color = Color.White)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CategoriesScreen(navController: NavController) {&#10;    Surface(modifier = Modifier.fillMaxSize()) {&#10;        Box(modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(brush = Brush.verticalGradient(listOf(BackgroundTop, BackgroundBottom)))) {&#10;            Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {&#10;                Text(text = &quot;Categorías&quot;, color = DarkText, fontSize = 24.sp)&#10;                Spacer(Modifier.height(12.dp))&#10;                val cats = listOf(&quot;Motor&quot;, &quot;Transmisión&quot;, &quot;Frenos&quot;, &quot;Ruedas&quot;)&#10;                cats.forEach { c -&gt;&#10;                    Text(text = c, color = DarkText, modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 8.dp)&#10;                        .clickable { navController.navigate(&quot;home&quot;) })&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AppNavHost() {&#10;    val navController = rememberNavController()&#10;    val context = LocalContext.current&#10;    val token = TokenStorage.getAccessToken(context)&#10;    val startDestination = if (!token.isNullOrEmpty()) &quot;dashboard&quot; else &quot;login&quot;&#10;&#10;    NavHost(navController = navController, startDestination = startDestination) {&#10;        composable(&quot;login&quot;) {&#10;            LoginScreen(navController = navController)&#10;        }&#10;        composable(&quot;register&quot;) {&#10;            RegisterScreen(navController = navController)&#10;        }&#10;        composable(&quot;dashboard&quot;) {&#10;            DashboardScreen(navController = navController, onLogout = {&#10;                navController.navigate(&quot;login&quot;) {&#10;                    popUpTo(&quot;dashboard&quot;) { inclusive = true }&#10;                }&#10;            })&#10;        }&#10;        composable(&quot;home&quot;) {&#10;            HomeScreen(navController = navController)&#10;        }&#10;        composable(&quot;product/{productId}&quot;) { backStackEntry -&gt;&#10;            val pid = backStackEntry.arguments?.getString(&quot;productId&quot;)&#10;            ProductDetailScreen(productId = pid, navController = navController)&#10;        }&#10;        composable(&quot;cart&quot;) {&#10;            CartScreen(navController = navController)&#10;        }&#10;        composable(&quot;search&quot;) {&#10;            SearchScreen(navController = navController)&#10;        }&#10;        composable(&quot;categories&quot;) {&#10;            CategoriesScreen(navController = navController)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.facturacion_inventario.ui&#10;&#10;import android.widget.Toast&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import kotlinx.coroutines.launch&#10;import com.example.auth.AuthRepository&#10;import com.example.auth.TokenStorage&#10;import com.example.facturacion_inventario.R&#10;&#10;// Fondo blanco puro y tarjetas blancas diferenciadas por borde sutil y elevación ligera&#10;private val BackgroundTop = Color(0xFFFFFFFF) // blanco puro&#10;private val BackgroundBottom = Color(0xFFFFFFFF) // blanco puro&#10;private val CardColor = Color(0xFFFFFFFF) // tarjetas también blancas&#10;private val CardBorder = Color(0xFFE6E6E6) // borde sutil para separar tarjeta del fondo&#10;private val Accent = Color(0xFF0B3D91) // azul oscuro&#10;private val DarkText = Color(0xFF0F1724) // texto principal oscuro&#10;private val SubtleText = Color(0xFF6B7280) // subtítulo / labels&#10;&#10;@Composable&#10;fun LoginScreen(navController: NavController? = null, onLoginSuccess: (() -&gt; Unit)? = null) {&#10;    val context = LocalContext.current&#10;    val scope = rememberCoroutineScope()&#10;    var username by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var loading by remember { mutableStateOf(false) }&#10;&#10;    Surface(modifier = Modifier.fillMaxSize()) {&#10;        Box(modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(brush = Brush.verticalGradient(listOf(BackgroundTop, BackgroundBottom)))) {&#10;&#10;            Column(modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = 24.dp), horizontalAlignment = Alignment.CenterHorizontally) {&#10;&#10;                Spacer(Modifier.height(60.dp))&#10;&#10;                // Header (logo + title)&#10;                Image(painter = painterResource(id = R.drawable.ic_motorcycle_animated), contentDescription = &quot;logo&quot;,&#10;                    modifier = Modifier.size(80.dp))&#10;                Spacer(Modifier.height(12.dp))&#10;                Text(text = &quot;Moto Parts&quot;, color = DarkText, fontSize = 28.sp)&#10;                Text(text = &quot;Repuestos y accesorios&quot;, color = SubtleText, fontSize = 14.sp)&#10;&#10;                Spacer(Modifier.height(32.dp))&#10;&#10;                Card(modifier = Modifier.fillMaxWidth(), backgroundColor = CardColor, border = BorderStroke(1.dp, CardBorder), shape = RoundedCornerShape(8.dp), elevation = 2.dp) {&#10;                    Column(modifier = Modifier.padding(24.dp)) {&#10;                        OutlinedTextField(&#10;                            value = username,&#10;                            onValueChange = { username = it },&#10;                            label = { Text(text = &quot;Usuario o correo&quot;, color = SubtleText) },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            singleLine = true,&#10;                            colors = TextFieldDefaults.outlinedTextFieldColors(&#10;                                focusedBorderColor = Accent,&#10;                                unfocusedBorderColor = Color(0xFFDDDDDF),&#10;                                textColor = DarkText,&#10;                                focusedLabelColor = Accent,&#10;                                unfocusedLabelColor = SubtleText&#10;                            )&#10;                        )&#10;&#10;                        Spacer(Modifier.height(12.dp))&#10;&#10;                        OutlinedTextField(&#10;                            value = password,&#10;                            onValueChange = { password = it },&#10;                            label = { Text(text = &quot;Contraseña&quot;, color = SubtleText) },&#10;                            visualTransformation = PasswordVisualTransformation(),&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            singleLine = true,&#10;                            colors = TextFieldDefaults.outlinedTextFieldColors(&#10;                                focusedBorderColor = Accent,&#10;                                unfocusedBorderColor = Color(0xFFDDDDDF),&#10;                                textColor = DarkText,&#10;                                focusedLabelColor = Accent,&#10;                                unfocusedLabelColor = SubtleText&#10;                            )&#10;                        )&#10;&#10;                        Spacer(Modifier.height(16.dp))&#10;&#10;                        if (loading) {&#10;                            Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {&#10;                                CircularProgressIndicator(color = Accent)&#10;                            }&#10;                        } else {&#10;                            Button(onClick = {&#10;                                if (username.isBlank() || password.isBlank()) {&#10;                                    Toast.makeText(context, &quot;Completa usuario y contraseña&quot;, Toast.LENGTH_SHORT).show()&#10;                                    return@Button&#10;                                }&#10;                                loading = true&#10;                                scope.launch {&#10;                                    try {&#10;                                        val repo = AuthRepository(context, &quot;http://10.0.2.2:8080/&quot;)&#10;                                        val resp = repo.login(username, password)&#10;                                        val access = resp?.accessTokenNormalized&#10;                                        val refresh = resp?.refreshTokenNormalized&#10;                                        if (!access.isNullOrEmpty()) TokenStorage.setAccessToken(context, access)&#10;                                        if (!refresh.isNullOrEmpty()) TokenStorage.setRefreshToken(context, refresh)&#10;                                        Toast.makeText(context, &quot;Login correcto&quot;, Toast.LENGTH_SHORT).show()&#10;                                        onLoginSuccess?.invoke()&#10;                                        navController?.let { nc -&gt;&#10;                                            nc.navigate(&quot;dashboard&quot;) {&#10;                                                popUpTo(&quot;login&quot;) { inclusive = true }&#10;                                            }&#10;                                        }&#10;                                    } catch (ex: Exception) {&#10;                                        Toast.makeText(context, &quot;Login falló: ${ex.message}&quot;, Toast.LENGTH_LONG).show()&#10;                                    } finally {&#10;                                        loading = false&#10;                                    }&#10;                                }&#10;&#10;                            }, modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(56.dp), colors = ButtonDefaults.buttonColors(backgroundColor = Accent)) {&#10;                                Text(text = &quot;Ingresar&quot;, color = Color.White)&#10;                            }&#10;&#10;                            Spacer(Modifier.height(12.dp))&#10;&#10;                            // Social login separator&#10;                            Divider(color = Color(0xFFDDDDDD), thickness = 1.dp)&#10;                            Spacer(Modifier.height(12.dp))&#10;                            Text(text = &quot;o continuar con&quot;, color = SubtleText, modifier = Modifier.align(Alignment.CenterHorizontally))&#10;                            Spacer(Modifier.height(8.dp))&#10;&#10;                            // Google button&#10;                            OutlinedButton(onClick = { /* implementar google */ }, modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(48.dp), colors = ButtonDefaults.outlinedButtonColors(backgroundColor = CardColor)) {&#10;                                Image(painter = painterResource(id = R.drawable.ic_google), contentDescription = &quot;google&quot;, modifier = Modifier.size(24.dp))&#10;                                Spacer(Modifier.width(12.dp))&#10;                                Text(text = &quot;Continuar con Google&quot;, color = DarkText)&#10;                            }&#10;&#10;                            Spacer(Modifier.height(8.dp))&#10;&#10;                            Button(onClick = { /* implementar facebook */ }, modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(48.dp), colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFF1877F2))) {&#10;                                Image(painter = painterResource(id = R.drawable.ic_facebook), contentDescription = &quot;facebook&quot;, modifier = Modifier.size(24.dp))&#10;                                Spacer(Modifier.width(12.dp))&#10;                                Text(text = &quot;Continuar con Facebook&quot;, color = Color.White)&#10;                            }&#10;&#10;                            Spacer(Modifier.height(12.dp))&#10;&#10;                            TextButton(onClick = { navController?.navigate(&quot;register&quot;) }, modifier = Modifier.fillMaxWidth()) {&#10;                                Text(text = &quot;Crear cuenta&quot;, color = Accent)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.weight(1f))&#10;&#10;                Text(text = &quot;© Tu Empresa&quot;, color = SubtleText, fontSize = 12.sp)&#10;                Spacer(Modifier.height(24.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RegisterScreen(navController: NavController? = null, onRegisterSuccess: (() -&gt; Unit)? = null) {&#10;    val context = LocalContext.current&#10;    val scope = rememberCoroutineScope()&#10;&#10;    var username by remember { mutableStateOf(&quot;&quot;) }&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var nombre by remember { mutableStateOf(&quot;&quot;) }&#10;    var apellido by remember { mutableStateOf(&quot;&quot;) }&#10;    var inviteCode by remember { mutableStateOf(&quot;&quot;) }&#10;    var loading by remember { mutableStateOf(false) }&#10;&#10;    Surface(modifier = Modifier.fillMaxSize()) {&#10;        Box(modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(brush = Brush.verticalGradient(listOf(BackgroundTop, BackgroundBottom)))) {&#10;&#10;            Column(modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = 24.dp), horizontalAlignment = Alignment.CenterHorizontally) {&#10;&#10;                Spacer(Modifier.height(40.dp))&#10;&#10;                // Back button + Title&#10;                Row(modifier = Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) {&#10;                    IconButton(onClick = { navController?.navigateUp() }) {&#10;                        Icon(painter = painterResource(id = R.drawable.ic_arrow_back), contentDescription = &quot;back&quot;, tint = DarkText)&#10;                    }&#10;                    Spacer(Modifier.width(8.dp))&#10;                    Text(text = &quot;Crear cuenta&quot;, color = DarkText, fontSize = 24.sp)&#10;                }&#10;&#10;                Spacer(Modifier.height(12.dp))&#10;&#10;                Card(modifier = Modifier.fillMaxWidth(), backgroundColor = CardColor, border = BorderStroke(1.dp, CardBorder), shape = RoundedCornerShape(8.dp), elevation = 2.dp) {&#10;                    Column(modifier = Modifier.padding(24.dp)) {&#10;&#10;                        OutlinedTextField(&#10;                            value = username,&#10;                            onValueChange = { username = it },&#10;                            label = { Text(&quot;Usuario&quot;, color = SubtleText) },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            singleLine = true,&#10;                            colors = TextFieldDefaults.outlinedTextFieldColors(&#10;                                focusedBorderColor = Accent,&#10;                                unfocusedBorderColor = Color(0xFFDDDDDF),&#10;                                textColor = DarkText&#10;                            )&#10;                        )&#10;&#10;                        Spacer(Modifier.height(12.dp))&#10;&#10;                        OutlinedTextField(&#10;                            value = email,&#10;                            onValueChange = { email = it },&#10;                            label = { Text(&quot;Email&quot;, color = SubtleText) },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            singleLine = true,&#10;                            colors = TextFieldDefaults.outlinedTextFieldColors(&#10;                                focusedBorderColor = Accent,&#10;                                unfocusedBorderColor = Color(0xFFDDDDDF),&#10;                                textColor = DarkText&#10;                            )&#10;                        )&#10;&#10;                        Spacer(Modifier.height(12.dp))&#10;&#10;                        OutlinedTextField(&#10;                            value = password,&#10;                            onValueChange = { password = it },&#10;                            label = { Text(&quot;Contraseña&quot;, color = SubtleText) },&#10;                            visualTransformation = PasswordVisualTransformation(),&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            singleLine = true,&#10;                            colors = TextFieldDefaults.outlinedTextFieldColors(&#10;                                focusedBorderColor = Accent,&#10;                                unfocusedBorderColor = Color(0xFFDDDDDF),&#10;                                textColor = DarkText&#10;                            )&#10;                        )&#10;&#10;                        Spacer(Modifier.height(12.dp))&#10;&#10;                        OutlinedTextField(&#10;                            value = nombre,&#10;                            onValueChange = { nombre = it },&#10;                            label = { Text(&quot;Nombre&quot;, color = SubtleText) },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            singleLine = true,&#10;                            colors = TextFieldDefaults.outlinedTextFieldColors(&#10;                                focusedBorderColor = Accent,&#10;                                unfocusedBorderColor = Color(0xFFDDDDDF),&#10;                                textColor = DarkText&#10;                            )&#10;                        )&#10;&#10;                        Spacer(Modifier.height(12.dp))&#10;&#10;                        OutlinedTextField(&#10;                            value = apellido,&#10;                            onValueChange = { apellido = it },&#10;                            label = { Text(&quot;Apellido&quot;, color = SubtleText) },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            singleLine = true,&#10;                            colors = TextFieldDefaults.outlinedTextFieldColors(&#10;                                focusedBorderColor = Accent,&#10;                                unfocusedBorderColor = Color(0xFFDDDDDF),&#10;                                textColor = DarkText&#10;                            )&#10;                        )&#10;&#10;                        Spacer(Modifier.height(12.dp))&#10;&#10;                        Text(text = &quot;Código de invitación (opcional)&quot;, color = Accent)&#10;                        Spacer(Modifier.height(8.dp))&#10;&#10;                        OutlinedTextField(&#10;                            value = inviteCode,&#10;                            onValueChange = { inviteCode = it },&#10;                            label = { Text(&quot;Código de invitación&quot;, color = SubtleText) },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            singleLine = true,&#10;                            colors = TextFieldDefaults.outlinedTextFieldColors(&#10;                                focusedBorderColor = Accent,&#10;                                unfocusedBorderColor = Color(0xFFDDDDDF),&#10;                                textColor = DarkText&#10;                            )&#10;                        )&#10;&#10;                        Spacer(Modifier.height(20.dp))&#10;&#10;                        if (loading) {&#10;                            Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {&#10;                                CircularProgressIndicator(color = Accent)&#10;                            }&#10;                        } else {&#10;                            Button(onClick = {&#10;                                // Validaciones: username, email, password, nombre, apellido&#10;                                if (username.isBlank() || email.isBlank() || password.isBlank() || nombre.isBlank() || apellido.isBlank()) {&#10;                                    Toast.makeText(context, &quot;Rellena usuario, email, contraseña, nombre y apellido&quot;, Toast.LENGTH_SHORT).show()&#10;                                    return@Button&#10;                                }&#10;                                loading = true&#10;                                scope.launch {&#10;                                    try {&#10;                                        val repo = AuthRepository(context, &quot;http://10.0.2.2:8080/&quot;)&#10;                                        val req = com.example.auth.RegisterRequest(&#10;                                            username = username,&#10;                                            email = email,&#10;                                            password = password,&#10;                                            inviteCode = if (inviteCode.isBlank()) null else inviteCode,&#10;                                            nombre = nombre,&#10;                                            apellido = apellido&#10;                                        )&#10;                                        val resp = repo.register(req)&#10;                                        val access = resp?.accessTokenNormalized&#10;                                        val refresh = resp?.refreshTokenNormalized&#10;                                        if (!access.isNullOrEmpty()) TokenStorage.setAccessToken(context, access)&#10;                                        if (!refresh.isNullOrEmpty()) TokenStorage.setRefreshToken(context, refresh)&#10;&#10;                                        // Guardar info del usuario localmente&#10;                                        TokenStorage.setUserInfo(context, username, nombre, apellido)&#10;&#10;                                        Toast.makeText(context, &quot;Registro exitoso&quot;, Toast.LENGTH_SHORT).show()&#10;                                        onRegisterSuccess?.invoke()&#10;                                        navController?.let { nc -&gt;&#10;                                            nc.navigate(&quot;dashboard&quot;) {&#10;                                                popUpTo(&quot;register&quot;) { inclusive = true }&#10;                                            }&#10;                                        }&#10;                                    } catch (ex: Exception) {&#10;                                        Toast.makeText(context, &quot;Registro fallido: ${ex.message}&quot;, Toast.LENGTH_LONG).show()&#10;                                    } finally {&#10;                                        loading = false&#10;                                    }&#10;                                }&#10;&#10;                            }, modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(56.dp), colors = ButtonDefaults.buttonColors(backgroundColor = Accent)) {&#10;                                Text(text = &quot;Crear cuenta&quot;, color = Color.White)&#10;                            }&#10;&#10;                            Spacer(Modifier.height(12.dp))&#10;&#10;                            Text(text = &quot;Al crear una cuenta aceptas los términos&quot;, color = SubtleText, fontSize = 12.sp, modifier = Modifier.align(Alignment.CenterHorizontally))&#10;                        }&#10;&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.weight(1f))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DashboardScreen(navController: NavController, onLogout: (() -&gt; Unit)? = null) {&#10;    val context = LocalContext.current&#10;    val nombre = TokenStorage.getNombre(context)&#10;    val apellido = TokenStorage.getApellido(context)&#10;    val username = TokenStorage.getUsername(context)&#10;&#10;    Surface(modifier = Modifier.fillMaxSize()) {&#10;        Box(modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(brush = Brush.verticalGradient(listOf(BackgroundTop, BackgroundBottom)))) {&#10;            Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {&#10;                Spacer(Modifier.height(24.dp))&#10;                Text(text = &quot;Dashboard&quot;, color = DarkText, fontSize = 24.sp)&#10;                Spacer(Modifier.height(12.dp))&#10;                Text(text = &quot;${nombre.orEmpty()} ${apellido.orEmpty()}&quot;, color = SubtleText)&#10;                Text(text = username ?: &quot;-&quot;, color = Color(0xFF9CA3AF))&#10;&#10;                Spacer(Modifier.height(20.dp))&#10;&#10;                Button(onClick = { navController.navigate(&quot;home&quot;) }, modifier = Modifier.fillMaxWidth(), colors = ButtonDefaults.buttonColors(backgroundColor = Accent)) {&#10;                    Text(text = &quot;Ir a la tienda&quot;, color = Color.White)&#10;                }&#10;&#10;                Spacer(Modifier.weight(1f))&#10;&#10;                Button(onClick = {&#10;                    TokenStorage.clear(context)&#10;                    onLogout?.invoke()&#10;                }, modifier = Modifier.fillMaxWidth(), colors = ButtonDefaults.buttonColors(backgroundColor = Accent)) {&#10;                    Text(text = &quot;Cerrar sesión&quot;, color = Color.White)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// --- Pantallas de tienda básicas ---&#10;@Composable&#10;fun HomeScreen(navController: NavController) {&#10;    Surface(modifier = Modifier.fillMaxSize()) {&#10;        Box(modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(brush = Brush.verticalGradient(listOf(BackgroundTop, BackgroundBottom)))) {&#10;            Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {&#10;                Text(text = &quot;Tienda&quot;, color = DarkText, fontSize = 24.sp)&#10;                Spacer(Modifier.height(12.dp))&#10;&#10;                // Lista ejemplo de productos (estáticos)&#10;                val products = listOf(&quot;Cadena de transmisión&quot;, &quot;Filtro de aire&quot;, &quot;Bujía&quot;, &quot;Neumático trasero&quot;)&#10;                products.forEachIndexed { index, item -&gt;&#10;                    Card(modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 6.dp)&#10;                        .clickable { navController.navigate(&quot;product/${index}&quot;) }, backgroundColor = CardColor, border = BorderStroke(1.dp, CardBorder)) {&#10;                        Row(modifier = Modifier.padding(12.dp), verticalAlignment = Alignment.CenterVertically) {&#10;                            Image(painter = painterResource(id = R.drawable.ic_motorcycle_animated), contentDescription = &quot;prod&quot;, modifier = Modifier.size(48.dp))&#10;                            Spacer(Modifier.width(12.dp))&#10;                            Column {&#10;                                Text(text = item, color = DarkText)&#10;                                Text(text = &quot;Descripción breve...&quot;, color = SubtleText, fontSize = 12.sp)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.weight(1f))&#10;                Row(horizontalArrangement = Arrangement.SpaceBetween, modifier = Modifier.fillMaxWidth()) {&#10;                    Button(onClick = { navController.navigate(&quot;cart&quot;) }, colors = ButtonDefaults.buttonColors(backgroundColor = Accent)) {&#10;                        Text(text = &quot;Carrito&quot;, color = Color.White)&#10;                    }&#10;                    Button(onClick = { navController.navigate(&quot;categories&quot;) }, colors = ButtonDefaults.buttonColors(backgroundColor = Accent)) {&#10;                        Text(text = &quot;Categorías&quot;, color = Color.White)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProductDetailScreen(productId: String?, navController: NavController) {&#10;    Surface(modifier = Modifier.fillMaxSize()) {&#10;        Box(modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(brush = Brush.verticalGradient(listOf(BackgroundTop, BackgroundBottom)))) {&#10;            Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {&#10;                Text(text = &quot;Detalle del producto&quot;, color = DarkText, fontSize = 24.sp)&#10;                Spacer(Modifier.height(12.dp))&#10;                Text(text = &quot;ID: ${productId ?: &quot;-&quot;}&quot;, color = SubtleText)&#10;&#10;                Spacer(Modifier.weight(1f))&#10;                Button(onClick = { navController.navigate(&quot;cart&quot;) }, modifier = Modifier.fillMaxWidth(), colors = ButtonDefaults.buttonColors(backgroundColor = Accent)) {&#10;                    Text(text = &quot;Añadir al carrito&quot;, color = Color.White)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CartScreen(navController: NavController) {&#10;    Surface(modifier = Modifier.fillMaxSize()) {&#10;        Box(modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(brush = Brush.verticalGradient(listOf(BackgroundTop, BackgroundBottom)))) {&#10;            Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {&#10;                Text(text = &quot;Carrito&quot;, color = DarkText, fontSize = 24.sp)&#10;                Spacer(Modifier.height(12.dp))&#10;                Text(text = &quot;Tu carrito está vacío (placeholder)&quot;, color = SubtleText)&#10;&#10;                Spacer(Modifier.weight(1f))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.spacedBy(12.dp)) {&#10;                    OutlinedButton(onClick = { navController.navigate(&quot;home&quot;) }, modifier = Modifier.weight(1f)) {&#10;                        Text(text = &quot;Seguir comprando&quot;, color = Accent)&#10;                    }&#10;                    Button(onClick = { /* ir a checkout */ }, modifier = Modifier.weight(1f), colors = ButtonDefaults.buttonColors(backgroundColor = Accent)) {&#10;                        Text(text = &quot;Finalizar compra&quot;, color = Color.White)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SearchScreen(navController: NavController) {&#10;    var query by remember { mutableStateOf(&quot;&quot;) }&#10;    Surface(modifier = Modifier.fillMaxSize()) {&#10;        Box(modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(brush = Brush.verticalGradient(listOf(BackgroundTop, BackgroundBottom)))) {&#10;            Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {&#10;                Text(text = &quot;Buscar&quot;, color = DarkText, fontSize = 24.sp)&#10;                Spacer(Modifier.height(12.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.spacedBy(8.dp)) {&#10;                    OutlinedTextField(value = query, onValueChange = { query = it }, label = { Text(&quot;Buscar productos&quot;, color = SubtleText) }, modifier = Modifier.weight(1f))&#10;                    Button(onClick = { /* aquí podrías navegar a resultados reales */ navController.navigate(&quot;home&quot;) }, colors = ButtonDefaults.buttonColors(backgroundColor = Accent)) {&#10;                        Text(text = &quot;Buscar&quot;, color = Color.White)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CategoriesScreen(navController: NavController) {&#10;    Surface(modifier = Modifier.fillMaxSize()) {&#10;        Box(modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(brush = Brush.verticalGradient(listOf(BackgroundTop, BackgroundBottom)))) {&#10;            Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {&#10;                Text(text = &quot;Categorías&quot;, color = DarkText, fontSize = 24.sp)&#10;                Spacer(Modifier.height(12.dp))&#10;                val cats = listOf(&quot;Motor&quot;, &quot;Transmisión&quot;, &quot;Frenos&quot;, &quot;Ruedas&quot;)&#10;                cats.forEach { c -&gt;&#10;                    Text(text = c, color = DarkText, modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 8.dp)&#10;                        .clickable { navController.navigate(&quot;home&quot;) })&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AppNavHost() {&#10;    val navController = rememberNavController()&#10;    val context = LocalContext.current&#10;    val token = TokenStorage.getAccessToken(context)&#10;    val startDestination = if (!token.isNullOrEmpty()) &quot;dashboard&quot; else &quot;login&quot;&#10;&#10;    NavHost(navController = navController, startDestination = startDestination) {&#10;        composable(&quot;login&quot;) {&#10;            LoginScreen(navController = navController)&#10;        }&#10;        composable(&quot;register&quot;) {&#10;            RegisterScreen(navController = navController)&#10;        }&#10;        composable(&quot;dashboard&quot;) {&#10;            DashboardScreen(navController = navController, onLogout = {&#10;                navController.navigate(&quot;login&quot;) {&#10;                    popUpTo(&quot;dashboard&quot;) { inclusive = true }&#10;                }&#10;            })&#10;        }&#10;        composable(&quot;home&quot;) {&#10;            HomeScreen(navController = navController)&#10;        }&#10;        composable(&quot;product/{productId}&quot;) { backStackEntry -&gt;&#10;            val pid = backStackEntry.arguments?.getString(&quot;productId&quot;)&#10;            ProductDetailScreen(productId = pid, navController = navController)&#10;        }&#10;        composable(&quot;cart&quot;) {&#10;            CartScreen(navController = navController)&#10;        }&#10;        composable(&quot;search&quot;) {&#10;            SearchScreen(navController = navController)&#10;        }&#10;        composable(&quot;categories&quot;) {&#10;            CategoriesScreen(navController = navController)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>