<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/../facturacion-inventory-android-kotlin/app/src/main/java/com/example/data/auth/ApiService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../facturacion-inventory-android-kotlin/app/src/main/java/com/example/data/auth/ApiService.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.example.data.auth&#10;&#10;import retrofit2.http.Body&#10;import retrofit2.http.POST&#10;import retrofit2.http.GET&#10;import retrofit2.Response&#10;&#10;&#10;interface ApiService {&#10;    @POST(&quot;/api/auth/register&quot;)&#10;    suspend fun register(@Body req: RegisterRequest): Response&lt;LoginResponse&gt;&#10;&#10;    // Fallback: endpoint que acepta un body genérico (map) por compatibilidad con diferentes APIs&#10;    @POST(&quot;/api/auth/register&quot;)&#10;    suspend fun registerMap(@Body body: Map&lt;String, @kotlin.jvm.JvmSuppressWildcards Any?&gt;): Response&lt;LoginResponse&gt;&#10;&#10;    @POST(&quot;/api/auth/login&quot;)&#10;    suspend fun login(@Body req: LoginRequest): Response&lt;LoginResponse&gt;&#10;&#10;    @POST(&quot;/api/auth/login&quot;)&#10;    suspend fun loginMap(@Body body: Map&lt;String, String&gt;): Response&lt;LoginResponse&gt;&#10;&#10;    @POST(&quot;/api/auth/refresh&quot;)&#10;    suspend fun refresh(@Body body: Map&lt;String, String&gt;): Response&lt;RefreshResponse&gt;&#10;&#10;    @POST(&quot;/api/auth/logout&quot;)&#10;    suspend fun logout(@Body body: Map&lt;String, String&gt;): Response&lt;Unit&gt;&#10;&#10;    // Nuevo endpoint: revoca todos los refresh tokens del usuario autenticado (usa Authorization)&#10;    @POST(&quot;/api/auth/revoke-all&quot;)&#10;    suspend fun revokeAll(): Response&lt;Unit&gt;&#10;&#10;    // Nuevo endpoint: obtener perfil del usuario autenticado&#10;    @GET(&quot;/api/auth/me&quot;)&#10;    suspend fun me(): Response&lt;Map&lt;String, @JvmSuppressWildcards Any?&gt;&gt;&#10;&#10;    // OAuth endpoints (según docs/openapi.yaml)&#10;    @POST(&quot;/api/auth/oauth/google&quot;)&#10;    suspend fun oauthGoogle(@Body body: Map&lt;String, String&gt;): Response&lt;LoginResponse&gt;&#10;&#10;    @POST(&quot;/api/auth/oauth/facebook&quot;)&#10;    suspend fun oauthFacebook(@Body body: Map&lt;String, String&gt;): Response&lt;LoginResponse&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../facturacion-inventory-android-kotlin/app/src/main/java/com/example/facturacion_inventario/ui/register/RegisterScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../facturacion-inventory-android-kotlin/app/src/main/java/com/example/facturacion_inventario/ui/register/RegisterScreen.kt" />
              <option name="updatedContent" value="// ...existing code...&#10;package com.example.facturacion_inventario.ui.register&#10;&#10;import android.widget.Toast&#10;import android.util.Patterns&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.facturacion_inventario.R&#10;import com.example.auth.AuthViewModel&#10;import com.example.data.auth.RegisterRequest&#10;import kotlinx.coroutines.launch&#10;import com.example.facturacion_inventario.ui.components.*&#10;&#10;@Composable&#10;fun RegisterScreen(authViewModel: AuthViewModel, navController: NavController? = null, onRegisterSuccess: (() -&gt; Unit)? = null) {&#10;    val context = LocalContext.current&#10;    val scope = rememberCoroutineScope()&#10;&#10;    var username by remember { mutableStateOf(&quot;&quot;) }&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var nombre by remember { mutableStateOf(&quot;&quot;) }&#10;    var apellido by remember { mutableStateOf(&quot;&quot;) }&#10;    var inviteCode by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    // Campos de error locales (validación cliente)&#10;    var usernameError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var emailError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var passwordError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var nombreError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var apellidoError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    val uiState by authViewModel.uiState.collectAsState()&#10;&#10;    // Mostrar errores con efecto (mostrar server error como Toast y también se muestra en UI debajo)&#10;    LaunchedEffect(key1 = uiState.errorMessage) {&#10;        uiState.errorMessage?.let { msg -&gt;&#10;            Toast.makeText(context, &quot;Registro falló: $msg&quot;, Toast.LENGTH_LONG).show()&#10;            // No limpiamos aquí; UI mostrará el mensaje también&#10;        }&#10;    }&#10;&#10;    // Navegar si registro correcto&#10;    LaunchedEffect(key1 = uiState.success) {&#10;        if (uiState.success) {&#10;            Toast.makeText(context, &quot;Registro exitoso&quot;, Toast.LENGTH_SHORT).show()&#10;            onRegisterSuccess?.invoke()&#10;            navController?.let { nc -&gt;&#10;                nc.navigate(&quot;store&quot;) {&#10;                    popUpTo(&quot;register&quot;) { inclusive = true }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    Surface(modifier = Modifier.fillMaxSize()) {&#10;        Box(modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(brush = Brush.verticalGradient(listOf(MaterialTheme.colors.background, MaterialTheme.colors.background)))) {&#10;&#10;            Column(modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = 24.dp), horizontalAlignment = Alignment.CenterHorizontally) {&#10;&#10;                Spacer(Modifier.height(40.dp))&#10;&#10;                // Back button + Title&#10;                Row(modifier = Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) {&#10;                    IconButton(onClick = { navController?.navigateUp() }) {&#10;                        Icon(painter = painterResource(id = R.drawable.ic_arrow_back), contentDescription = &quot;back&quot;, tint = MaterialTheme.colors.onBackground)&#10;                    }&#10;                    Spacer(Modifier.width(8.dp))&#10;                    Text(text = &quot;Crear cuenta&quot;, color = MaterialTheme.colors.onBackground, fontSize = 24.sp)&#10;                }&#10;&#10;                Spacer(Modifier.height(12.dp))&#10;&#10;                Card(modifier = Modifier.fillMaxWidth(), backgroundColor = MaterialTheme.colors.surface, border = BorderStroke(1.dp, MaterialTheme.colors.onSurface.copy(alpha = 0.12f)), shape = RoundedCornerShape(8.dp), elevation = 4.dp) {&#10;                    Column(modifier = Modifier.padding(24.dp)) {&#10;&#10;                        // Usamos los campos reutilizables AppOutlinedTextField&#10;                        AppOutlinedTextField(&#10;                            value = username,&#10;                            onValueChange = { username = it },&#10;                            label = { Text(&quot;Usuario&quot;, color = MaterialTheme.colors.secondary) },&#10;                            singleLine = true&#10;                        )&#10;                        usernameError?.let { Text(text = it, color = MaterialTheme.colors.error, style = MaterialTheme.typography.caption, modifier = Modifier.padding(top = 4.dp)) }&#10;&#10;                        Spacer(Modifier.height(12.dp))&#10;&#10;                        AppOutlinedTextField(&#10;                            value = email,&#10;                            onValueChange = { email = it },&#10;                            label = { Text(&quot;Email&quot;, color = MaterialTheme.colors.secondary) },&#10;                            singleLine = true&#10;                        )&#10;                        emailError?.let { Text(text = it, color = MaterialTheme.colors.error, style = MaterialTheme.typography.caption, modifier = Modifier.padding(top = 4.dp)) }&#10;&#10;                        Spacer(Modifier.height(12.dp))&#10;&#10;                        AppOutlinedTextField(&#10;                            value = password,&#10;                            onValueChange = { password = it },&#10;                            label = { Text(&quot;Contraseña&quot;, color = MaterialTheme.colors.secondary) },&#10;                            singleLine = true,&#10;                            visualTransformation = PasswordVisualTransformation()&#10;                        )&#10;                        passwordError?.let { Text(text = it, color = MaterialTheme.colors.error, style = MaterialTheme.typography.caption, modifier = Modifier.padding(top = 4.dp)) }&#10;&#10;                        Spacer(Modifier.height(12.dp))&#10;&#10;                        AppOutlinedTextField(&#10;                            value = nombre,&#10;                            onValueChange = { nombre = it },&#10;                            label = { Text(&quot;Nombre&quot;, color = MaterialTheme.colors.secondary) },&#10;                            singleLine = true&#10;                        )&#10;                        nombreError?.let { Text(text = it, color = MaterialTheme.colors.error, style = MaterialTheme.typography.caption, modifier = Modifier.padding(top = 4.dp)) }&#10;&#10;                        Spacer(Modifier.height(12.dp))&#10;&#10;                        AppOutlinedTextField(&#10;                            value = apellido,&#10;                            onValueChange = { apellido = it },&#10;                            label = { Text(&quot;Apellido&quot;, color = MaterialTheme.colors.secondary) },&#10;                            singleLine = true&#10;                        )&#10;                        apellidoError?.let { Text(text = it, color = MaterialTheme.colors.error, style = MaterialTheme.typography.caption, modifier = Modifier.padding(top = 4.dp)) }&#10;&#10;                        Spacer(Modifier.height(12.dp))&#10;&#10;                        Text(text = &quot;Código de invitación (opcional)&quot;, color = MaterialTheme.colors.primary)&#10;                        Spacer(Modifier.height(8.dp))&#10;&#10;                        AppOutlinedTextField(&#10;                            value = inviteCode,&#10;                            onValueChange = { inviteCode = it },&#10;                            label = { Text(&quot;Código de invitación&quot;, color = MaterialTheme.colors.secondary) },&#10;                            singleLine = true&#10;                        )&#10;&#10;                        Spacer(Modifier.height(20.dp))&#10;&#10;                        if (uiState.loading) {&#10;                            Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {&#10;                                CircularProgressIndicator(color = MaterialTheme.colors.primary)&#10;                            }&#10;                        } else {&#10;                            PrimaryButton(onClick = {&#10;                                // Reset errores previos&#10;                                usernameError = null&#10;                                emailError = null&#10;                                passwordError = null&#10;                                nombreError = null&#10;                                apellidoError = null&#10;&#10;                                // Trim inputs&#10;                                val usernameTrim = username.trim()&#10;                                val emailTrim = email.trim()&#10;                                val passwordTrim = password&#10;                                val nombreTrim = nombre.trim()&#10;                                val apellidoTrim = apellido.trim()&#10;&#10;                                var hasError = false&#10;                                if (usernameTrim.length &lt; 3) {&#10;                                    usernameError = &quot;El usuario debe tener al menos 3 caracteres&quot;&#10;                                    hasError = true&#10;                                }&#10;                                if (!Patterns.EMAIL_ADDRESS.matcher(emailTrim).matches()) {&#10;                                    emailError = &quot;Ingresa un email válido&quot;&#10;                                    hasError = true&#10;                                }&#10;                                if (passwordTrim.length &lt; 6) {&#10;                                    passwordError = &quot;La contraseña debe tener al menos 6 caracteres&quot;&#10;                                    hasError = true&#10;                                }&#10;                                if (nombreTrim.isBlank()) {&#10;                                    nombreError = &quot;Ingresa tu nombre&quot;&#10;                                    hasError = true&#10;                                }&#10;                                if (apellidoTrim.isBlank()) {&#10;                                    apellidoError = &quot;Ingresa tu apellido&quot;&#10;                                    hasError = true&#10;                                }&#10;&#10;                                if (hasError) return@PrimaryButton&#10;&#10;                                scope.launch {&#10;                                    val req = RegisterRequest(&#10;                                        username = usernameTrim,&#10;                                        email = emailTrim,&#10;                                        password = passwordTrim,&#10;                                        inviteCode = if (inviteCode.isBlank()) null else inviteCode.trim(),&#10;                                        nombre = nombreTrim,&#10;                                        apellido = apellidoTrim&#10;                                    )&#10;                                    authViewModel.register(req)&#10;                                }&#10;&#10;                            }, text = &quot;Crear cuenta&quot;)&#10;&#10;                            Spacer(Modifier.height(12.dp))&#10;&#10;                            Text(text = &quot;Al crear una cuenta aceptas los términos&quot;, color = MaterialTheme.colors.secondary, fontSize = 12.sp, modifier = Modifier.align(Alignment.CenterHorizontally))&#10;                        }&#10;&#10;                    }&#10;                }&#10;&#10;                // Mostrar mensaje de error del servidor si existe&#10;                uiState.errorMessage?.let { err -&gt;&#10;                    Spacer(Modifier.height(12.dp))&#10;                    Card(modifier = Modifier.fillMaxWidth(), backgroundColor = MaterialTheme.colors.error.copy(alpha = 0.1f)) {&#10;                        Text(text = err, color = MaterialTheme.colors.error, modifier = Modifier.padding(12.dp))&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.weight(1f))&#10;            }&#10;        }&#10;    }&#10;}&#10;// ...existing code...&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>