<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/facturacion_inventario/ui/store/StoreHost.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/facturacion_inventario/ui/store/StoreHost.kt" />
              <option name="originalContent" value="package com.example.facturacion_inventario.ui.store&#10;&#10;import android.app.Activity&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.auth.AuthViewModel&#10;import com.example.facturacion_inventario.R&#10;import androidx.compose.foundation.layout.statusBarsPadding&#10;import androidx.compose.foundation.layout.navigationBarsPadding&#10;import androidx.compose.ui.platform.LocalView&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.core.view.WindowCompat&#10;import androidx.compose.ui.graphics.Color&#10;import java.net.URLEncoder&#10;import java.nio.charset.StandardCharsets&#10;import com.example.facturacion_inventario.data.repository.FakeProductRepository&#10;&#10;@Composable&#10;fun StoreHost(authViewModel: AuthViewModel, rootNavController: NavController) {&#10;    val storeNavController = rememberNavController()&#10;    val repo = remember { FakeProductRepository() }&#10;    var selectedTab by remember { mutableStateOf(&quot;home&quot;) }&#10;    var isSearchActive by rememberSaveable { mutableStateOf(false) }&#10;&#10;    // Mantener query en el scope del host para usarla en el topbar y en las sugerencias&#10;    var query by rememberSaveable { mutableStateOf(&quot;&quot;) }&#10;&#10;    // Color azul para TopBar/statusBar (similar a Amazon) con iconos blancos&#10;    val topBarBlue = Color(0xFF0A6ED1)&#10;&#10;    val view = LocalView.current&#10;    val context = LocalContext.current&#10;    if (!view.isInEditMode) {&#10;        SideEffect {&#10;            val activity = (context as? Activity)&#10;            activity?.window?.statusBarColor = topBarBlue.toArgb()&#10;            activity?.let { act -&gt;&#10;                // permitir que la app dibuje detrás de las barras del sistema&#10;                WindowCompat.setDecorFitsSystemWindows(act.window, false)&#10;                val controller = WindowCompat.getInsetsController(act.window, view)&#10;                controller.isAppearanceLightStatusBars = false // icons light (white)&#10;            }&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            // TopAppBar que cambia según estado de búsqueda&#10;            TopAppBar(&#10;                modifier = Modifier.statusBarsPadding(),&#10;                elevation = 2.dp,&#10;                backgroundColor = topBarBlue,&#10;                contentColor = Color.White&#10;            ) {&#10;                if (isSearchActive) {&#10;                    // Versión expandida: back + campo editable&#10;                    Row(modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(horizontal = 8.dp), verticalAlignment = Alignment.CenterVertically) {&#10;                        IconButton(onClick = {&#10;                            // Cerrar búsqueda y limpiar query&#10;                            isSearchActive = false&#10;                            query = &quot;&quot;&#10;                        }) {&#10;                            Icon(painter = painterResource(id = R.drawable.ic_arrow_back), contentDescription = &quot;back&quot;, tint = Color.White)&#10;                        }&#10;                        Spacer(modifier = Modifier.width(4.dp))&#10;                        TextField(&#10;                            value = query,&#10;                            onValueChange = { new -&gt; query = new },&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .height(48.dp),&#10;                            placeholder = { Text(text = &quot;Buscar productos&quot;, color = Color.White.copy(alpha = 0.7f)) },&#10;                            singleLine = true,&#10;                            colors = TextFieldDefaults.textFieldColors(&#10;                                textColor = Color.White,&#10;                                cursorColor = Color.White,&#10;                                backgroundColor = Color.Transparent,&#10;                                focusedIndicatorColor = Color.Transparent,&#10;                                unfocusedIndicatorColor = Color.Transparent,&#10;                                leadingIconColor = Color.White,&#10;                                placeholderColor = Color.White.copy(alpha = 0.7f)&#10;                            ),&#10;                            trailingIcon = {&#10;                                IconButton(onClick = {&#10;                                    // Al pulsar lupa, buscar primer resultado parcial&#10;                                    val q = query.trim()&#10;                                    if (q.isBlank()) return@IconButton&#10;                                    var found = repo.getProductById(q)&#10;                                    if (found == null) {&#10;                                        found = repo.getProducts().firstOrNull { it.name.contains(q, ignoreCase = true) }&#10;                                    }&#10;                                    if (found != null) {&#10;                                        isSearchActive = false&#10;                                        query = &quot;&quot;&#10;                                        storeNavController.navigate(&quot;product/${URLEncoder.encode(found.id, StandardCharsets.UTF_8.toString())}&quot;)&#10;                                    }&#10;                                }) {&#10;                                    Icon(painter = painterResource(id = R.drawable.ic_search), contentDescription = &quot;buscar&quot;, tint = Color.White)&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                } else {&#10;                    // Versión compacta: logo + caja read-only&#10;                    Row(modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(horizontal = 8.dp), verticalAlignment = Alignment.CenterVertically) {&#10;&#10;                        Icon(painter = painterResource(id = R.drawable.ic_motorcycle_animated), contentDescription = &quot;logo&quot;, tint = Color.White)&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                        Surface(&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .height(44.dp)&#10;                                .clip(RoundedCornerShape(12.dp))&#10;                                .clickable { isSearchActive = true },&#10;                            color = topBarBlue.copy(alpha = 0.15f)&#10;                        ) {&#10;                            Row(modifier = Modifier&#10;                                .fillMaxSize()&#10;                                .padding(horizontal = 12.dp), verticalAlignment = Alignment.CenterVertically) {&#10;                                Icon(painter = painterResource(id = R.drawable.ic_search), contentDescription = &quot;buscar&quot;, tint = Color.White.copy(alpha = 0.9f))&#10;                                Spacer(modifier = Modifier.width(12.dp))&#10;                                Text(text = &quot;Buscar productos&quot;, color = Color.White.copy(alpha = 0.9f))&#10;                            }&#10;                        }&#10;&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        IconButton(onClick = { /* acción futura */ }) {&#10;                            Icon(painter = painterResource(id = R.drawable.ic_person), contentDescription = &quot;perfil&quot;, tint = Color.White)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        bottomBar = {&#10;            if (!isSearchActive) {&#10;                Box(modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .navigationBarsPadding()&#10;                    .padding(vertical = 4.dp), contentAlignment = Alignment.Center) {&#10;                    Surface(&#10;                        shape = RoundedCornerShape(24.dp),&#10;                        elevation = 8.dp,&#10;                        color = MaterialTheme.colors.surface,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 16.dp)&#10;                    ) {&#10;                        Row(modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 4.dp), horizontalArrangement = Arrangement.SpaceAround, verticalAlignment = Alignment.CenterVertically) {&#10;&#10;                            IconButton(onClick = {&#10;                                selectedTab = &quot;home&quot;&#10;                                storeNavController.navigate(&quot;home&quot;) { popUpTo(&quot;home&quot;) }&#10;                            }) {&#10;                                Icon(painter = painterResource(id = R.drawable.ic_motorcycle_animated), contentDescription = &quot;home&quot;, tint = if (selectedTab == &quot;home&quot;) MaterialTheme.colors.primary else MaterialTheme.colors.onSurface)&#10;                            }&#10;&#10;                            IconButton(onClick = {&#10;                                selectedTab = &quot;profile&quot;&#10;                                storeNavController.navigate(&quot;profile&quot;) { popUpTo(&quot;home&quot;) }&#10;                            }) {&#10;                                Icon(painter = painterResource(id = R.drawable.ic_person), contentDescription = &quot;profile&quot;, tint = if (selectedTab == &quot;profile&quot;) MaterialTheme.colors.primary else MaterialTheme.colors.onSurface)&#10;                            }&#10;&#10;                            IconButton(onClick = {&#10;                                selectedTab = &quot;cart&quot;&#10;                                storeNavController.navigate(&quot;cart&quot;) { popUpTo(&quot;home&quot;) }&#10;                            }) {&#10;                                Icon(painter = painterResource(id = R.drawable.ic_badge), contentDescription = &quot;cart&quot;, tint = if (selectedTab == &quot;cart&quot;) MaterialTheme.colors.primary else MaterialTheme.colors.onSurface)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Box(modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(innerPadding)) {&#10;&#10;            Column(modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = 12.dp)) {&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                // Cuando la búsqueda está activa, no mostramos sugerencias en una ventana separada;&#10;                // la búsqueda se realiza directamente al pulsar la lupa o al confirmar el texto.&#10;                // (no se renderiza lista de sugerencias aquí para seguir el diseño solicitado)&#10;&#10;                // Contenido principal de la tienda (NavHost)&#10;                Box(modifier = Modifier&#10;                    .weight(1f)&#10;                    .padding(bottom = 8.dp)) {&#10;                    NavHost(navController = storeNavController, startDestination = &quot;home&quot;) {&#10;                        composable(&quot;home&quot;) {&#10;                            HomeScreen(navController = storeNavController)&#10;                        }&#10;                        composable(&quot;product/{productId}&quot;) { backStackEntry -&gt;&#10;                            val pid = backStackEntry.arguments?.getString(&quot;productId&quot;)&#10;                            ProductDetailScreen(productId = pid, navController = storeNavController)&#10;                        }&#10;                        composable(&quot;cart&quot;) {&#10;                            CartScreen(navController = storeNavController)&#10;                        }&#10;                        composable(&quot;profile&quot;) {&#10;                            ProfileScreen(authViewModel = authViewModel, rootNavController = rootNavController)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.facturacion_inventario.ui.store&#10;&#10;import android.app.Activity&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.auth.AuthViewModel&#10;import com.example.facturacion_inventario.R&#10;import androidx.compose.foundation.layout.statusBarsPadding&#10;import androidx.compose.foundation.layout.navigationBarsPadding&#10;import androidx.compose.ui.platform.LocalView&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.core.view.WindowCompat&#10;import androidx.compose.ui.graphics.Color&#10;import java.net.URLEncoder&#10;import java.nio.charset.StandardCharsets&#10;import com.example.facturacion_inventario.data.repository.FakeProductRepository&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.platform.LocalFocusManager&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardOptions&#10;import androidx.compose.ui.text.input.KeyboardActions&#10;import androidx.compose.foundation.layout.heightIn&#10;&#10;@Composable&#10;fun StoreHost(authViewModel: AuthViewModel, rootNavController: NavController) {&#10;    val storeNavController = rememberNavController()&#10;    val repo = remember { FakeProductRepository() }&#10;    var selectedTab by remember { mutableStateOf(&quot;home&quot;) }&#10;    var isSearchActive by rememberSaveable { mutableStateOf(false) }&#10;&#10;    // Mantener query en el scope del host para usarla en el topbar y en las sugerencias&#10;    var query by rememberSaveable { mutableStateOf(&quot;&quot;) }&#10;&#10;    // Color azul para TopBar/statusBar (similar a Amazon) con iconos blancos&#10;    val topBarBlue = Color(0xFF0A6ED1)&#10;&#10;    val view = LocalView.current&#10;    val context = LocalContext.current&#10;    val focusManager = LocalFocusManager.current&#10;&#10;    if (!view.isInEditMode) {&#10;        @Suppress(&quot;DEPRECATION&quot;)&#10;        SideEffect {&#10;            val activity = (context as? Activity)&#10;            activity?.window?.statusBarColor = topBarBlue.toArgb()&#10;            activity?.let { act -&gt;&#10;                // permitir que la app dibuje detrás de las barras del sistema&#10;                WindowCompat.setDecorFitsSystemWindows(act.window, false)&#10;                val controller = WindowCompat.getInsetsController(act.window, view)&#10;                controller.isAppearanceLightStatusBars = false // icons light (white)&#10;            }&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            // TopAppBar con búsqueda estilo Amazon&#10;            TopAppBar(&#10;                backgroundColor = topBarBlue,&#10;                contentColor = Color.White,&#10;                elevation = 4.dp,&#10;                modifier = Modifier.statusBarsPadding()&#10;            ) {&#10;                Row(modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 12.dp, vertical = 8.dp), verticalAlignment = Alignment.CenterVertically) {&#10;&#10;                    // Logo o ícono a la izquierda&#10;                    Icon(painter = painterResource(id = R.drawable.ic_motorcycle_animated), contentDescription = &quot;logo&quot;, tint = Color.White, modifier = Modifier.size(28.dp))&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                    // Caja de búsqueda blanca y redondeada&#10;                    Box(modifier = Modifier&#10;                        .weight(1f)&#10;                        .height(44.dp)) {&#10;                        Surface(&#10;                            shape = RoundedCornerShape(20.dp),&#10;                            color = Color.White,&#10;                            elevation = 0.dp,&#10;                            modifier = Modifier&#10;                                .fillMaxSize()&#10;                                .clip(RoundedCornerShape(20.dp))&#10;                        ) {&#10;                            Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier&#10;                                .fillMaxSize()&#10;                                .padding(start = 12.dp, end = 8.dp)) {&#10;                                Icon(painter = painterResource(id = R.drawable.ic_search), contentDescription = &quot;search&quot;, tint = Color.Gray)&#10;                                Spacer(modifier = Modifier.width(8.dp))&#10;                                // TextField sin fondo (sitúa sobre la superficie blanca)&#10;                                TextField(&#10;                                    value = query,&#10;                                    onValueChange = { new: String -&gt; query = new },&#10;                                    modifier = Modifier&#10;                                        .weight(1f)&#10;                                        .fillMaxHeight(),&#10;                                    placeholder = { Text(text = &quot;Buscar productos, marcas y más&quot;, color = Color.Gray) },&#10;                                    singleLine = true,&#10;                                    keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Search),&#10;                                    keyboardActions = KeyboardActions(&#10;                                        onSearch = {&#10;                                            // realizar búsqueda similar al comportamiento anterior&#10;                                            val q = query.trim()&#10;                                            if (q.isNotBlank()) {&#10;                                                var found = repo.getProductById(q)&#10;                                                if (found == null) {&#10;                                                    found = repo.getProducts().firstOrNull { it.name.contains(q, ignoreCase = true) }&#10;                                                }&#10;                                                if (found != null) {&#10;                                                    focusManager.clearFocus()&#10;                                                    query = &quot;&quot;&#10;                                                    storeNavController.navigate(&quot;product/${URLEncoder.encode(found.id, StandardCharsets.UTF_8.toString())}&quot;)&#10;                                                }&#10;                                            }&#10;                                        }&#10;                                    ),&#10;                                    colors = TextFieldDefaults.textFieldColors(&#10;                                        textColor = Color.Black,&#10;                                        cursorColor = Color.Black,&#10;                                        backgroundColor = Color.Transparent,&#10;                                        focusedIndicatorColor = Color.Transparent,&#10;                                        unfocusedIndicatorColor = Color.Transparent,&#10;                                        disabledIndicatorColor = Color.Transparent&#10;                                    )&#10;                                )&#10;                                if (query.isNotBlank()) {&#10;                                    IconButton(onClick = { query = &quot;&quot; }) {&#10;                                        Icon(painter = painterResource(id = R.drawable.ic_arrow_back), contentDescription = &quot;clear&quot;, tint = Color.Gray)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                    // Perfil o acciones&#10;                    IconButton(onClick = { /* acción futura */ }) {&#10;                        Icon(painter = painterResource(id = R.drawable.ic_person), contentDescription = &quot;perfil&quot;, tint = Color.White)&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        bottomBar = {&#10;            // Barra inferior estilo elevado y central&#10;            if (!isSearchActive) {&#10;                Box(modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .navigationBarsPadding()&#10;                    .padding(vertical = 8.dp), contentAlignment = Alignment.Center) {&#10;                    Surface(&#10;                        shape = RoundedCornerShape(28.dp),&#10;                        elevation = 12.dp,&#10;                        color = Color.White,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth(0.92f)&#10;                            .height(64.dp)&#10;                    ) {&#10;                        Row(modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .padding(horizontal = 16.dp), horizontalArrangement = Arrangement.SpaceAround, verticalAlignment = Alignment.CenterVertically) {&#10;&#10;                            // Home&#10;                            Column(horizontalAlignment = Alignment.CenterHorizontally, modifier = Modifier.clickable {&#10;                                selectedTab = &quot;home&quot;&#10;                                storeNavController.navigate(&quot;home&quot;) { popUpTo(&quot;home&quot;) }&#10;                            }) {&#10;                                Icon(painter = painterResource(id = R.drawable.ic_motorcycle_animated), contentDescription = &quot;home&quot;, tint = if (selectedTab == &quot;home&quot;) topBarBlue else Color.Gray)&#10;                                Text(text = &quot;Inicio&quot;, color = if (selectedTab == &quot;home&quot;) topBarBlue else Color.Gray, fontWeight = if (selectedTab == &quot;home&quot;) FontWeight.Bold else FontWeight.Normal, style = MaterialTheme.typography.caption)&#10;                            }&#10;&#10;                            // Profile&#10;                            Column(horizontalAlignment = Alignment.CenterHorizontally, modifier = Modifier.clickable {&#10;                                selectedTab = &quot;profile&quot;&#10;                                storeNavController.navigate(&quot;profile&quot;) { popUpTo(&quot;home&quot;) }&#10;                            }) {&#10;                                Icon(painter = painterResource(id = R.drawable.ic_person), contentDescription = &quot;profile&quot;, tint = if (selectedTab == &quot;profile&quot;) topBarBlue else Color.Gray)&#10;                                Text(text = &quot;Cuenta&quot;, color = if (selectedTab == &quot;profile&quot;) topBarBlue else Color.Gray, fontWeight = if (selectedTab == &quot;profile&quot;) FontWeight.Bold else FontWeight.Normal, style = MaterialTheme.typography.caption)&#10;                            }&#10;&#10;                            // Cart&#10;                            Column(horizontalAlignment = Alignment.CenterHorizontally, modifier = Modifier.clickable {&#10;                                selectedTab = &quot;cart&quot;&#10;                                storeNavController.navigate(&quot;cart&quot;) { popUpTo(&quot;home&quot;) }&#10;                            }) {&#10;                                Icon(painter = painterResource(id = R.drawable.ic_badge), contentDescription = &quot;cart&quot;, tint = if (selectedTab == &quot;cart&quot;) topBarBlue else Color.Gray)&#10;                                Text(text = &quot;Carrito&quot;, color = if (selectedTab == &quot;cart&quot;) topBarBlue else Color.Gray, fontWeight = if (selectedTab == &quot;cart&quot;) FontWeight.Bold else FontWeight.Normal, style = MaterialTheme.typography.caption)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Box(modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(innerPadding)) {&#10;&#10;            Column(modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = 12.dp)) {&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                // Sugerencias desplegables: se muestran justo debajo de la barra de búsqueda cuando hay texto.&#10;                val suggestions = remember(query) {&#10;                    if (query.isBlank()) emptyList() else repo.getProducts().filter { it.name.contains(query, ignoreCase = true) }&#10;                }&#10;&#10;                if (suggestions.isNotEmpty()) {&#10;                    Card(&#10;                        elevation = 8.dp,&#10;                        shape = RoundedCornerShape(8.dp),&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 4.dp)&#10;                    ) {&#10;                        LazyColumn(modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .heightIn(max = 200.dp)) {&#10;                            items(suggestions) { product -&gt;&#10;                                Row(modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .clickable {&#10;                                        // navegar al producto seleccionado&#10;                                        storeNavController.navigate(&quot;product/${URLEncoder.encode(product.id, StandardCharsets.UTF_8.toString())}&quot;)&#10;                                        query = &quot;&quot;&#10;                                        focusManager.clearFocus()&#10;                                    }&#10;                                    .padding(12.dp), verticalAlignment = Alignment.CenterVertically) {&#10;                                    Icon(painter = painterResource(id = product.imageRes), contentDescription = product.name, tint = Color.Unspecified, modifier = Modifier.size(36.dp))&#10;                                    Spacer(modifier = Modifier.width(10.dp))&#10;                                    Column(modifier = Modifier.weight(1f)) {&#10;                                        Text(text = product.name, fontWeight = FontWeight.SemiBold, maxLines = 1, overflow = TextOverflow.Ellipsis)&#10;                                        Text(text = product.description, style = MaterialTheme.typography.caption, color = Color.Gray, maxLines = 1, overflow = TextOverflow.Ellipsis)&#10;                                    }&#10;                                }&#10;                                Divider()&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Contenido principal de la tienda (NavHost)&#10;                Box(modifier = Modifier&#10;                    .weight(1f)&#10;                    .padding(bottom = 8.dp)) {&#10;                    NavHost(navController = storeNavController, startDestination = &quot;home&quot;) {&#10;                        composable(&quot;home&quot;) {&#10;                            HomeScreen(navController = storeNavController)&#10;                        }&#10;                        composable(&quot;product/{productId}&quot;) { backStackEntry -&gt;&#10;                            val pid = backStackEntry.arguments?.getString(&quot;productId&quot;)&#10;                            ProductDetailScreen(productId = pid, navController = storeNavController)&#10;                        }&#10;                        composable(&quot;cart&quot;) {&#10;                            CartScreen(navController = storeNavController)&#10;                        }&#10;                        composable(&quot;profile&quot;) {&#10;                            ProfileScreen(authViewModel = authViewModel, rootNavController = rootNavController)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>