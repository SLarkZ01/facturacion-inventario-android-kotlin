<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/docs/NO_OP_COMMENT_TEMPLATE.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/NO_OP_COMMENT_TEMPLATE.md" />
              <option name="updatedContent" value="# Plantilla de Documentación para Funciones No-Op / Placeholder&#10;&#10;##  Plantilla Estándar&#10;&#10;Usar esta plantilla para documentar funciones vacías, no-op o placeholder:&#10;&#10;```kotlin&#10;/**&#10; * ⚠️ FUNCIÓN NO-OP / PLACEHOLDER&#10; * &#10; * PROPÓSITO ORIGINAL:&#10; * [Descripción de para qué fue creada originalmente esta función]&#10; * &#10; * ESTADO ACTUAL:&#10; * [Explicar por qué está vacía o no-op actualmente]&#10; * &#10; * RAZÓN DE MANTENERLA:&#10; * - [ ] Compatibilidad con código existente que la invoca&#10; * - [ ] Diseño futuro planificado&#10; * - [ ] Interfaz/contrato que debe cumplirse&#10; * - [ ] Evitar breaking changes en la API pública&#10; * - [ ] Placeholder para implementación pendiente&#10; * &#10; * CONDICIONES PARA ELIMINACIÓN:&#10; * - [Condición 1: ejemplo: &quot;Cuando se migre completamente a la nueva API&quot;]&#10; * - [Condición 2: ejemplo: &quot;Cuando no haya invocaciones en el código&quot;]&#10; * - [Condición 3: ejemplo: &quot;Después de la versión X.Y.Z&quot;]&#10; * &#10; * IMPLEMENTACIÓN FUTURA (opcional):&#10; * [Descripción de cómo debería implementarse si se decide hacerlo]&#10; * &#10; * @see [Referencias a clases/funciones relacionadas]&#10; * @since [Versión en que se creó]&#10; * @deprecated [Si aplica, indicar desde cuándo y alternativa]&#10; */&#10;@Suppress(&quot;UNUSED_PARAMETER&quot;) // Si tiene parámetros no usados&#10;fun ejemploNoOp(parametro: String) {&#10;    // No-op: Implementación vacía intencionalmente&#10;}&#10;```&#10;&#10;##  Variaciones de la Plantilla&#10;&#10;### Para Funciones Composable No-Op&#10;&#10;```kotlin&#10;/**&#10; * ⚠️ COMPOSABLE NO-OP&#10; * &#10; * PROPÓSITO ORIGINAL: [...]&#10; * ESTADO ACTUAL: [...]&#10; * RAZÓN DE MANTENERLA: [...]&#10; * CONDICIONES PARA ELIMINACIÓN: [...]&#10; */&#10;@Suppress(&quot;UNUSED_PARAMETER&quot;)&#10;@Composable&#10;fun EjemploComposableNoOp(param: Int) {&#10;    // No-op: Renderizado vacío intencionalmente&#10;}&#10;```&#10;&#10;### Para Funciones con Comentario de Implementación Futura&#10;&#10;```kotlin&#10;/**&#10; *  FUNCIÓN PLACEHOLDER - IMPLEMENTACIÓN PENDIENTE&#10; * &#10; * PROPÓSITO: [...]&#10; * ESTADO ACTUAL: Placeholder que no ejecuta lógica&#10; * RAZÓN DE MANTENERLA: Diseño de API definido, implementación pendiente&#10; * CONDICIONES PARA IMPLEMENTACIÓN: [...]&#10; */&#10;fun ejemploPlaceholder() {&#10;    // TODO: Implementar lógica de [descripción]&#10;}&#10;```&#10;&#10;### Para Callbacks Vacíos&#10;&#10;```kotlin&#10;/**&#10; * ⚠️ CALLBACK NO-OP&#10; * &#10; * PROPÓSITO ORIGINAL: [...]&#10; * ESTADO ACTUAL: No ejecuta acción&#10; * RAZÓN: Se mantiene para evitar null checks en el código llamador&#10; * CONDICIONES PARA ELIMINACIÓN: Cuando se implemente el manejo real del evento&#10; */&#10;val onClickNoOp: () -&gt; Unit = { /* No-op callback */ }&#10;```&#10;&#10;##  Ejemplos de Uso&#10;&#10;### Ejemplo 1: Función de Sincronización Deshabilitada&#10;```kotlin&#10;/**&#10; * ⚠️ FUNCIÓN NO-OP&#10; * &#10; * PROPÓSITO ORIGINAL:&#10; * Sincronizar el color de la barra de estado del sistema con el progreso&#10; * del header colapsable para crear una transición visual fluida.&#10; * &#10; * ESTADO ACTUAL:&#10; * Deshabilitada a petición del usuario. No modifica la barra de estado.&#10; * &#10; * RAZÓN DE MANTENERLA:&#10; * - [x] Compatibilidad con código existente que la invoca desde StoreHost&#10; * - [x] Evitar breaking changes (la función se llama en múltiples lugares)&#10; * &#10; * CONDICIONES PARA ELIMINACIÓN:&#10; * - Cuando se refactorice StoreHost y se eliminen todas las invocaciones&#10; * - Después de verificar que no se necesita en ninguna otra pantalla&#10; * - En la próxima versión mayor (breaking changes permitidos)&#10; * &#10; * @param headerProgress Progreso de colapso del header (0f = expandido, 1f = colapsado)&#10; * @param initialColor Color inicial de la barra de estado&#10; * @see StoreHost donde se invoca esta función&#10; * @since v1.0&#10; */&#10;@Suppress(&quot;UNUSED_PARAMETER&quot;)&#10;@Composable&#10;fun StatusBarSync(headerProgress: Float, initialColor: Color = Color(0xFFFFA500)) {&#10;    // No-op: la lógica de modificación de barra de estado ha sido eliminada&#10;}&#10;```&#10;&#10;### Ejemplo 2: Feature No Implementada&#10;```kotlin&#10;/**&#10; *  FUNCIÓN PLACEHOLDER - IMPLEMENTACIÓN PENDIENTE&#10; * &#10; * PROPÓSITO ORIGINAL:&#10; * Permitir la compra directa de un producto sin agregarlo al carrito,&#10; * navegando directamente al checkout con ese único producto.&#10; * &#10; * ESTADO ACTUAL:&#10; * Placeholder sin implementación. El botón existe en la UI pero no ejecuta acción.&#10; * &#10; * RAZÓN DE MANTENERLA:&#10; * - [x] Diseño de UX ya definido (botón visible en ProductDetailScreen)&#10; * - [x] Feature planificada para siguiente sprint&#10; * - [x] Evita tener que modificar la UI más adelante&#10; * &#10; * CONDICIONES PARA IMPLEMENTACIÓN:&#10; * - Cuando se complete la pantalla de Checkout&#10; * - Cuando se implemente el flujo de pago inmediato&#10; * - Sprint 3 según roadmap del proyecto&#10; * &#10; * IMPLEMENTACIÓN FUTURA:&#10; * Debe crear un carrito temporal con el producto seleccionado,&#10; * navegar a la pantalla de checkout y pasar el contexto de &quot;compra rápida&quot;.&#10; * &#10; * @param product Producto a comprar directamente&#10; * @param quantity Cantidad del producto&#10; * @param onComplete Callback al completar la compra&#10; */&#10;fun buyNow(product: Product, quantity: Int, onComplete: () -&gt; Unit) {&#10;    // TODO: Implementar compra directa&#10;    // 1. Crear carrito temporal&#10;    // 2. Navegar a checkout con flag buyNow=true&#10;    // 3. Ejecutar onComplete después de pago exitoso&#10;}&#10;```&#10;&#10;##  Guía de Uso&#10;&#10;1. **Identificar el tipo de función**: No-op, Placeholder, Callback vacío&#10;2. **Copiar la plantilla apropiada**&#10;3. **Completar cada sección**:&#10;   - ✅ PROPÓSITO ORIGINAL: Siempre obligatorio&#10;   - ✅ ESTADO ACTUAL: Explicar claramente por qué está vacía&#10;   - ✅ RAZÓN DE MANTENERLA: Marcar con [x] las que apliquen&#10;   - ✅ CONDICIONES PARA ELIMINACIÓN: Ser específico y medible&#10;4. **Agregar anotaciones relevantes**: `@Suppress`, `@Deprecated`, `@Composable`&#10;5. **Incluir comentario inline**: Breve recordatorio de que es no-op&#10;&#10;## ⚡ Checklist de Calidad&#10;&#10;Antes de considerar la documentación completa, verificar:&#10;&#10;- [ ] ¿Se explica claramente por qué existe la función?&#10;- [ ] ¿Se documenta por qué está vacía actualmente?&#10;- [ ] ¿Las condiciones de eliminación son específicas y medibles?&#10;- [ ] ¿Se agregó `@Suppress` para silenciar warnings relevantes?&#10;- [ ] ¿Hay un comentario inline breve para lectura rápida?&#10;- [ ] ¿Se referenciaron las ubicaciones donde se usa?&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/NO_OP_DOCUMENTATION_SUMMARY.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/NO_OP_DOCUMENTATION_SUMMARY.md" />
              <option name="updatedContent" value="#  Resumen: Documentación de Funciones No-Op y Placeholder&#10;&#10;## ✅ Trabajo Completado&#10;&#10;Se ha documentado correctamente **3 funciones/archivos** con comportamiento no-op o placeholder, aplicando una plantilla estándar de documentación.&#10;&#10;---&#10;&#10;##  Archivos Documentados&#10;&#10;### 1️⃣ **StatusBarSync.kt** - Función No-Op&#10;**Ubicación:** `ui/store/StatusBarSync.kt`&#10;&#10;**Tipo:** ⚠️ COMPOSABLE NO-OP&#10;&#10;**Estado:** &#10;- Función completamente vacía (no ejecuta lógica)&#10;- Se mantiene solo por compatibilidad con StoreHost.kt&#10;&#10;**Propósito Original:**&#10;- Sincronizar color de barra de estado con scroll del header&#10;&#10;**Razones para Mantenerla:**&#10;- ✅ Compatibilidad con código existente&#10;- ✅ Evitar breaking changes&#10;- ✅ Fácil reactivación si se necesita&#10;&#10;**Cuándo Eliminarla:**&#10;- Al refactorizar StoreHost.kt&#10;- En versión mayor (v2.0+)&#10;- Si se decide no sincronizar barra de estado permanentemente&#10;&#10;---&#10;&#10;### 2️⃣ **ProductDetailScreen.kt** - Botón &quot;Comprar Ahora&quot;&#10;**Ubicación:** `ui/screens/ProductDetailScreen.kt` (línea ~101)&#10;&#10;**Tipo:**  BOTÓN PLACEHOLDER - IMPLEMENTACIÓN PENDIENTE&#10;&#10;**Estado:**&#10;- Botón visible en UI pero con onClick vacío&#10;- No ejecuta ninguna acción al hacer clic&#10;&#10;**Propósito Original:**&#10;- Compra directa sin pasar por el carrito (quick buy)&#10;- Navegación inmediata a checkout&#10;&#10;**Razones para Mantenerlo:**&#10;- ✅ Diseño UX ya definido&#10;- ✅ Feature planificada para futuro&#10;- ✅ Patrón común en e-commerce&#10;- ✅ Evita modificar UI después&#10;&#10;**Cuándo Implementarlo:**&#10;- Al completar pantalla de Checkout&#10;- Al definir flujo de &quot;compra rápida&quot;&#10;- Según priorización del backlog&#10;&#10;**Implementación Futura:**&#10;```kotlin&#10;onClick = { &#10;    navController.navigate(&#10;        &quot;${Routes.CHECKOUT}?buyNow=true&amp;productId=${prod.id}&amp;quantity=$selectedQuantity&quot;&#10;    )&#10;}&#10;```&#10;&#10;---&#10;&#10;### 3️⃣ **CartAnimations.kt** - Archivo Completo&#10;**Ubicación:** `ui/store/CartAnimations.kt`&#10;&#10;**Tipo:** ⚠️ ARCHIVO PLACEHOLDER - IMPLEMENTACIÓN PARCIAL NO UTILIZADA&#10;&#10;**Estado:**&#10;- Código completo y funcional&#10;- NO se usa en ninguna pantalla&#10;- Contiene animación &quot;fly to cart&quot; lista para usar&#10;&#10;**Propósito Original:**&#10;- Animación visual de producto volando hacia el carrito&#10;- Mejorar feedback visual al agregar productos&#10;&#10;**Razones para Mantenerlo:**&#10;- ✅ Animación ya implementada y funcional&#10;- ✅ Feature planificada para UX mejorada&#10;- ✅ Evita rehacer trabajo desde cero&#10;- ✅ Código reutilizable&#10;&#10;**Cuándo Implementarlo:**&#10;- Al priorizar mejoras visuales del carrito&#10;- Cuando se quiera feedback más rico&#10;- Requiere integrar coordenadas de producto y carrito&#10;&#10;**Cuándo Eliminarlo:**&#10;- Si se decide no usar &quot;fly to cart&quot;&#10;- Si se opta por otra solución de animación&#10;- Si el peso del código no justifica la feature&#10;&#10;**Uso Futuro:**&#10;```kotlin&#10;var flyingItem by remember { mutableStateOf&lt;FlyingItem?&gt;(null) }&#10;&#10;// Al agregar producto:&#10;flyingItem = FlyingItem(startX, startY, targetX, targetY)&#10;&#10;// En UI:&#10;FlyToCartAnimation(&#10;    flyingItem = flyingItem,&#10;    onAnimationEnd = { flyingItem = null }&#10;)&#10;```&#10;&#10;---&#10;&#10;##  Plantilla Creada&#10;&#10;Se creó el archivo **`docs/NO_OP_COMMENT_TEMPLATE.md`** con:&#10;&#10;✅ **Plantilla estándar reutilizable** para documentar funciones no-op&#10;✅ **Variaciones** para diferentes casos (Composable, Placeholder, Callback)&#10;✅ **Ejemplos de uso** completos y detallados&#10;✅ **Checklist de calidad** para verificar documentación completa&#10;✅ **Guía de uso** paso a paso&#10;&#10;---&#10;&#10;##  Estructura de la Plantilla&#10;&#10;Cada función documentada incluye:&#10;&#10;```kotlin&#10;/**&#10; * ⚠️ [TIPO: NO-OP / PLACEHOLDER / etc.]&#10; * &#10; * PROPÓSITO ORIGINAL:&#10; * [Descripción clara del propósito original]&#10; * &#10; * ESTADO ACTUAL:&#10; * [Por qué está vacía o no se usa]&#10; * &#10; * RAZÓN DE MANTENERLA:&#10; * - [x] Compatibilidad&#10; * - [x] Diseño futuro&#10; * - [x] Evitar breaking changes&#10; * &#10; * CONDICIONES PARA ELIMINACIÓN:&#10; * - [Condición específica y medible]&#10; * - [Cuándo y bajo qué circunstancias]&#10; * &#10; * IMPLEMENTACIÓN FUTURA (opcional):&#10; * [Cómo debería implementarse]&#10; * &#10; * @see [Referencias]&#10; * @since [Versión]&#10; */&#10;@Suppress(&quot;UNUSED_PARAMETER&quot;) // si aplica&#10;fun ejemplo() {&#10;    // No-op: comentario inline breve&#10;}&#10;```&#10;&#10;---&#10;&#10;##  Beneficios Conseguidos&#10;&#10;✅ **Claridad:** Cualquier desarrollador entiende por qué existe el código vacío&#10;✅ **Mantenibilidad:** Condiciones claras para eliminar o implementar&#10;✅ **Consistencia:** Plantilla estándar aplicable a todo el proyecto&#10;✅ **Trazabilidad:** Historial documentado de decisiones de diseño&#10;✅ **Reducción de deuda técnica:** Código no-op identificado y justificado&#10;&#10;---&#10;&#10;##  Próximos Pasos Sugeridos&#10;&#10;1. **Revisar otros archivos** del proyecto buscando más funciones no-op&#10;2. **Aplicar la plantilla** a TODO comentarios sin documentar&#10;3. **Priorizar implementaciones** según documentación de &quot;CONDICIONES&quot;&#10;4. **Refactorizar** funciones que ya cumplan condiciones de eliminación&#10;5. **Actualizar plantilla** si se encuentran nuevos casos de uso&#10;&#10;---&#10;&#10;##  Descripción para Commit&#10;&#10;```&#10;docs(no-op): documentar funciones no-op/placeholder con plantilla estándar&#10;&#10;- Crear plantilla reutilizable en docs/NO_OP_COMMENT_TEMPLATE.md&#10;- Documentar StatusBarSync.kt (composable no-op)&#10;- Documentar botón &quot;Comprar ahora&quot; en ProductDetailScreen&#10;- Documentar CartAnimations.kt (implementado pero no usado)&#10;- Incluir propósito, estado actual, razones y condiciones de eliminación&#10;- Agregar ejemplos de implementación futura&#10;```&#10;&#10;O versión breve:&#10;&#10;```&#10;docs(no-op): documentar funciones vacías con plantilla estándar&#10;&#10;- Crear plantilla docs/NO_OP_COMMENT_TEMPLATE.md&#10;- Documentar StatusBarSync, botón &quot;Comprar ahora&quot; y CartAnimations&#10;- Incluir propósito, razones y condiciones de eliminación&#10;```&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>